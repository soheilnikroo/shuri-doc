"use strict";(self.webpackChunkshu_doc=self.webpackChunkshu_doc||[]).push([[301],{8313:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"creating-packages","title":"Creating Packages","description":"Learn how to create your first Shuriken CLI package","source":"@site/docs/creating-packages.md","sourceDirName":".","slug":"/creating-packages","permalink":"/shuri-doc/docs/creating-packages","draft":false,"unlisted":false,"editUrl":"https://github.com/soheilnikroo/shuri-doc/edit/main/docs/creating-packages.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Creating Packages","description":"Learn how to create your first Shuriken CLI package"},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/shuri-doc/docs/concepts"},"next":{"title":"Commands","permalink":"/shuri-doc/docs/commands"}}');var r=t(3420),s=t(9932);const o={sidebar_position:4,title:"Creating Packages",description:"Learn how to create your first Shuriken CLI package"},a="\ud83c\udfd7\ufe0f Creating Packages",c={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"Package Structure",id:"package-structure",level:2},{value:"Package Definition",id:"package-definition",level:2},{value:"Metadata Properties",id:"metadata-properties",level:3},{value:"Creating Commands",id:"creating-commands",level:2},{value:"Basic Command Structure",id:"basic-command-structure",level:3},{value:"Command Options",id:"command-options",level:3},{value:"Interactive Commands",id:"interactive-commands",level:3},{value:"Setup Commands",id:"setup-commands",level:2},{value:"File Templates",id:"file-templates",level:2},{value:"Core Utilities",id:"core-utilities",level:2},{value:"Testing Your Package",id:"testing-your-package",level:2},{value:"Package Validation",id:"package-validation",level:2},{value:"Publishing Your Package",id:"publishing-your-package",level:2},{value:"Internal Distribution",id:"internal-distribution",level:3},{value:"NPM Registry",id:"npm-registry",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Naming Conventions",id:"1-naming-conventions",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. User Experience",id:"3-user-experience",level:3},{value:"4. Documentation",id:"4-documentation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\ufe0f-creating-packages",children:"\ud83c\udfd7\ufe0f Creating Packages"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to create powerful, reusable CLI packages that integrate seamlessly with Shuriken CLI."}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.p,{children:"The fastest way to create a new package is using the built-in scaffolding tool:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Generate a new package\npnpm run prepare-package\n\n# Follow the interactive prompts\n? Package name: my-awesome-tools\n? Display name: My Awesome Tools\n? Description: A collection of awesome development tools\n? Initial version: 1.0.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"This creates a complete package structure ready for customization."}),"\n",(0,r.jsx)(n.h2,{id:"package-structure",children:"Package Structure"}),"\n",(0,r.jsx)(n.p,{children:"Every Shuriken package follows this structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"packages/my-awesome-tools/\n\u251c\u2500\u2500 commands/              # Command implementations\n\u2502   \u251c\u2500\u2500 setup.ts          # Setup command (optional)\n\u2502   \u251c\u2500\u2500 build.ts          # Custom commands\n\u2502   \u2514\u2500\u2500 deploy.ts\n\u251c\u2500\u2500 migrations/            # Version migration scripts\n\u2502   \u251c\u2500\u2500 1.0.0.ts\n\u2502   \u251c\u2500\u2500 1.1.0.ts\n\u2502   \u2514\u2500\u2500 index.ts          # Migration exports\n\u251c\u2500\u2500 templates/             # Code templates\n\u2502   \u251c\u2500\u2500 component.ts\n\u2502   \u2514\u2500\u2500 service.ts\n\u251c\u2500\u2500 core/                  # Shared utilities\n\u2502   \u251c\u2500\u2500 logger.ts\n\u2502   \u251c\u2500\u2500 file.ts\n\u2502   \u2514\u2500\u2500 process.ts\n\u2514\u2500\u2500 index.ts              # Package definition (required)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"package-definition",children:"Package Definition"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"index.ts"})," file is the heart of your package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import type { IPackageDefinition } from '@/types';\n\n// Import your commands\nimport setupCommand from './commands.md/setup';\nimport buildCommand from './commands.md/build';\nimport deployCommand from './commands.md/deploy';\n\n// Import migrations\nimport { migrations } from './commands.md';\n\nconst packageDefinition: IPackageDefinition = {\n  metadata: {\n    name: 'my-awesome-tools', // CLI package name\n    version: '1.2.0', // Current version\n    description: 'Awesome development tools for modern projects',\n  },\n  commands: [\n    setupCommand, // Built-in setup command\n    buildCommand, // Custom commands\n    deployCommand,\n  ],\n  migrations, // Version migrations\n};\n\nexport default packageDefinition;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"metadata-properties",children:"Metadata Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Package identifier (used in CLI)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"version"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Current package version (semver)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"description"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Package description for help text"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"creating-commands",children:"Creating Commands"}),"\n",(0,r.jsx)(n.p,{children:"Commands are the building blocks of your package functionality."}),"\n",(0,r.jsx)(n.h3,{id:"basic-command-structure",children:"Basic Command Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import type { ICommandDefinition } from '@/types';\nimport { injectable, inject } from 'inversify';\nimport { Logger } from '@/core/logger';\n\n@injectable()\nexport class BuildCommand {\n  constructor(@inject('Logger') private logger: Logger) {}\n\n  async execute(options: any, context: any): Promise<void> {\n    this.logger.info('\ud83d\udd28 Starting build process...');\n\n    // Your command logic here\n\n    this.logger.success('\u2705 Build completed successfully!');\n  }\n}\n\nconst buildCommand: ICommandDefinition = {\n  name: 'build',\n  description: 'Build the project for production',\n  options: [\n    {\n      name: 'env',\n      alias: 'e',\n      type: 'string',\n      description: 'Build environment',\n      default: 'production',\n    },\n    {\n      name: 'watch',\n      alias: 'w',\n      type: 'boolean',\n      description: 'Watch for file changes',\n      default: false,\n    },\n  ],\n  handler: BuildCommand,\n};\n\nexport default buildCommand;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"command-options",children:"Command Options"}),"\n",(0,r.jsx)(n.p,{children:"Commands can accept various types of options:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ICommandOption {\n  name: string; // Option name (--env)\n  alias?: string; // Short alias (-e)\n  type: 'string' | 'boolean' | 'number';\n  description: string; // Help text\n  required?: boolean; // Is this option required?\n  default?: any; // Default value\n  choices?: string[]; // Valid choices\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"interactive-commands",children:"Interactive Commands"}),"\n",(0,r.jsx)(n.p,{children:"Create commands that prompt users for input:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { PromptService } from '@/services/prompt';\n\n@injectable()\nexport class InteractiveCommand {\n  constructor(\n    @inject('PromptService') private prompt: PromptService,\n    @inject('Logger') private logger: Logger\n  ) {}\n\n  async execute(options: any, context: any): Promise<void> {\n    // Gather user input\n    const answers = await this.prompt.ask([\n      {\n        type: 'input',\n        name: 'componentName',\n        message: 'What is the component name?',\n        validate: (input: string) => {\n          if (!input.trim()) return 'Component name is required';\n          return true;\n        },\n      },\n      {\n        type: 'list',\n        name: 'framework',\n        message: 'Choose a framework:',\n        choices: ['React', 'Vue', 'Angular'],\n      },\n      {\n        type: 'confirm',\n        name: 'includeTests',\n        message: 'Include test files?',\n        default: true,\n      },\n    ]);\n\n    // Use the answers\n    this.logger.info(\n      `Creating ${answers.framework} component: ${answers.componentName}`\n    );\n\n    if (answers.includeTests) {\n      this.logger.info('\ud83d\udcdd Including test files');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"setup-commands",children:"Setup Commands"}),"\n",(0,r.jsx)(n.p,{children:"Every package should have a setup command that initializes the package configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import type { ICommandDefinition } from '@/types';\nimport { injectable, inject } from 'inversify';\nimport { Logger } from '@/core/logger';\nimport { FileService } from '@/core/file';\n\n@injectable()\nexport class SetupCommand {\n  constructor(\n    @inject('Logger') private logger: Logger,\n    @inject('FileService') private fileService: FileService\n  ) {}\n\n  async execute(options: any, context: any): Promise<void> {\n    this.logger.info('\ud83c\udfaf Setting up my-awesome-tools...');\n\n    // Create configuration file\n    const config = {\n      version: '1.0.0',\n      preferences: {\n        theme: options.theme || 'dark',\n        verbose: options.verbose || false,\n      },\n      tools: {\n        buildTool: options.buildTool || 'vite',\n        testFramework: options.testFramework || 'jest',\n      },\n    };\n\n    // Write .shuriken.json to project root\n    const registryPath = path.join(context.workingDirectory, '.shuriken.json');\n    await this.fileService.writeJson(registryPath, {\n      packages: {\n        'my-awesome-tools': config,\n      },\n    });\n\n    this.logger.success('\u2705 Setup completed successfully!');\n    this.logger.info('\ud83d\udcc1 Configuration saved to .shuriken.json');\n  }\n}\n\nconst setupCommand: ICommandDefinition = {\n  name: 'setup',\n  description: 'Initialize my-awesome-tools configuration',\n  options: [\n    {\n      name: 'theme',\n      type: 'string',\n      description: 'UI theme preference',\n      choices: ['light', 'dark'],\n      default: 'dark',\n    },\n    {\n      name: 'build-tool',\n      type: 'string',\n      description: 'Preferred build tool',\n      choices: ['vite', 'webpack', 'rollup'],\n      default: 'vite',\n    },\n  ],\n  handler: SetupCommand,\n};\n\nexport default setupCommand;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"file-templates",children:"File Templates"}),"\n",(0,r.jsx)(n.p,{children:"Create reusable code templates for scaffolding:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// templates/component.ts\nexport interface ComponentTemplateOptions {\n  name: string;\n  framework: 'react' | 'vue' | 'angular';\n  typescript: boolean;\n  includeStyles: boolean;\n}\n\nexport const componentTemplate = (\n  options: ComponentTemplateOptions\n): string => {\n  const { name, framework, typescript, includeStyles } = options;\n\n  if (framework === 'react') {\n    return `${typescript ? \"import React from 'react';\" : ''}\n${includeStyles ? `import styles from './${name}.module.css';` : ''}\n\n${\n  typescript\n    ? `interface ${name}Props {\n  // Add your props here\n}\n\nconst ${name}: React.FC<${name}Props> = (props) => {`\n    : `const ${name} = (props) => {`\n}\n  return (\n    <div${includeStyles ? ` className={styles.container}` : ''}>\n      <h1>${name} Component</h1>\n      {/* Component content */}\n    </div>\n  );\n};\n\nexport default ${name};\n`;\n  }\n\n  // Add other framework templates...\n  return '';\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-utilities",children:"Core Utilities"}),"\n",(0,r.jsx)(n.p,{children:"Create shared utilities for your package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// core/logger.ts\nimport { Logger as BaseLogger } from '@/core/logger';\n\nexport class MyPackageLogger extends BaseLogger {\n  constructor() {\n    super();\n    this.setPrefix('\ud83d\udee0\ufe0f  MY-TOOLS');\n  }\n\n  build(message: string): void {\n    this.log('info', `\ud83d\udd28 [BUILD] ${message}`, 'yellow');\n  }\n\n  deploy(message: string): void {\n    this.log('info', `\ud83d\ude80 [DEPLOY] ${message}`, 'cyan');\n  }\n\n  test(message: string): void {\n    this.log('info', `\ud83e\uddea [TEST] ${message}`, 'green');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// core/file.ts\nimport { FileService as BaseFileService } from '@/core/file';\nimport path from 'path';\n\nexport class MyPackageFileService extends BaseFileService {\n  /**\n   * Create a standard project structure\n   */\n  async createProjectStructure(projectPath: string): Promise<void> {\n    const directories = [\n      'src/components',\n      'src/utils',\n      'src/hooks',\n      'tests',\n      'docs',\n    ];\n\n    for (const dir of directories) {\n      await this.ensureDir(path.join(projectPath, dir));\n    }\n  }\n\n  /**\n   * Find all TypeScript files in the project\n   */\n  async findTypeScriptFiles(projectPath: string): Promise<string[]> {\n    return this.glob('**/*.{ts,tsx}', {\n      cwd: projectPath,\n      ignore: ['node_modules/**', 'dist/**'],\n    });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-your-package",children:"Testing Your Package"}),"\n",(0,r.jsx)(n.p,{children:"Create tests for your commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// commands/__tests__/build.test.ts\nimport { Container } from 'inversify';\nimport { BuildCommand } from '../build';\nimport { Logger } from '@/core/logger';\n\ndescribe('BuildCommand', () => {\n  let command: BuildCommand;\n  let mockLogger: jest.Mocked<Logger>;\n\n  beforeEach(() => {\n    mockLogger = {\n      info: jest.fn(),\n      success: jest.fn(),\n      error: jest.fn(),\n    } as any;\n\n    command = new BuildCommand(mockLogger);\n  });\n\n  it('should execute build successfully', async () => {\n    const options = { env: 'production' };\n    const context = { workingDirectory: '/test/project' };\n\n    await command.execute(options, context);\n\n    expect(mockLogger.info).toHaveBeenCalledWith(\n      '\ud83d\udd28 Starting build process...'\n    );\n    expect(mockLogger.success).toHaveBeenCalledWith(\n      '\u2705 Build completed successfully!'\n    );\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"package-validation",children:"Package Validation"}),"\n",(0,r.jsx)(n.p,{children:"Ensure your package follows best practices:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// scripts/validate-package.ts\nimport { validatePackageStructure } from '@/utils/package-validator';\n\nasync function validateMyPackage() {\n  const packagePath = './packages/my-awesome-tools';\n\n  const validation = await validatePackageStructure(packagePath);\n\n  if (validation.isValid) {\n    console.log('\u2705 Package structure is valid');\n  } else {\n    console.error('\u274c Package validation failed:');\n    validation.errors.forEach((error) => {\n      console.error(`  - ${error}`);\n    });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"publishing-your-package",children:"Publishing Your Package"}),"\n",(0,r.jsx)(n.h3,{id:"internal-distribution",children:"Internal Distribution"}),"\n",(0,r.jsx)(n.p,{children:"For internal company use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build the package\npnpm build\n\n# Create a tarball\nnpm pack\n\n# Install in another project\nnpm install ./my-awesome-tools-1.0.0.tgz\n"})}),"\n",(0,r.jsx)(n.h3,{id:"npm-registry",children:"NPM Registry"}),"\n",(0,r.jsx)(n.p,{children:"For public or private NPM registry:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// package.json\n{\n  "name": "@your-org/shuriken-my-awesome-tools",\n  "version": "1.0.0",\n  "main": "dist/index.js",\n  "types": "dist/index.d.ts",\n  "files": ["dist", "templates", "README.md"]\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Publish to NPM\nnpm publish --access public\n\n# Or to private registry\nnpm publish --registry https://npm.your-company.com\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-naming-conventions",children:"1. Naming Conventions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Package names"}),": Use kebab-case (",(0,r.jsx)(n.code,{children:"my-awesome-tools"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Command names"}),": Use kebab-case (",(0,r.jsx)(n.code,{children:"build-app"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Option names"}),": Use kebab-case (",(0,r.jsx)(n.code,{children:"--build-tool"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"async execute(options: any, context: any): Promise<void> {\n  try {\n    await this.performOperation();\n  } catch (error) {\n    if (error instanceof ValidationError) {\n      this.logger.error(`\u274c ${error.message}`);\n      this.showSuggestions(error.suggestions);\n    } else {\n      this.logger.error(`\u274c Unexpected error: ${error.message}`);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-user-experience",children:"3. User Experience"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provide clear, actionable error messages"}),"\n",(0,r.jsx)(n.li,{children:"Use consistent emoji and color coding"}),"\n",(0,r.jsx)(n.li,{children:"Show progress for long-running operations"}),"\n",(0,r.jsx)(n.li,{children:"Offer helpful suggestions for common mistakes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-documentation",children:"4. Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Include comprehensive README.md"}),"\n",(0,r.jsx)(n.li,{children:"Document all command options"}),"\n",(0,r.jsx)(n.li,{children:"Provide usage examples"}),"\n",(0,r.jsx)(n.li,{children:"Create migration guides for breaking changes"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you can create packages:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u26a1 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/shuri-doc/docs/commands",children:"Master Command Definitions"})})," - Build sophisticated commands"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/shuri-doc/docs/commands",children:"Learn Migration System"})})," - Handle version upgrades"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udca1 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/shuri-doc/docs/commands",children:"Explore Examples"})})," - See real-world implementations"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83c\udf1f ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/shuri-doc/docs/commands",children:"Follow Best Practices"})})," - Build maintainable packages"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Ready to create powerful CLI commands? Let's dive deeper! \ud83e\udd77"})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9932:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6672);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);